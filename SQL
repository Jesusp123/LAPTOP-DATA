#AND statement use AND not &

#when querying data, ide automatically capitalizes all letters
#if column has spaces or special char uses underscore instead
#create a table
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    column3 datatype,
   ....
);

# Diffrent ALTER commands
ALTER TABLE table_name
ADD COLUMN column_name data_type column_constraint;

ALTER TABLE table_name
DROP COLUMN column_name;

ALTER TABLE table_name
ALTER COLUMN column_name SET DATA TYPE data_type;

ALTER TABLE table_name
RENAME COLUMN current_column_name TO new_column_name;

#Delete all data from table
TRUNCATE TABLE table_name;

#Drop Data
DROP TABLE table_name;

#create table example#Not Null doesn't allow null values
CREATE TABLE PET (
    ID INTEGER NOT NULL,
    ANIMAL VARCHAR(20),
    QUANTITY INTEGER
    );

#insert values into table
INSERT INTO PET VALUES
    (1,'Cat',3),
    (2,'Dog',4),
    (3,'Hamster',2);
    
#select all data
SELECT * FROM PET;

#ADD Date using Alter EX
ALTER TABLE PET
ADD COLUMN QUANTITY INTEGER;

#UPDATE Command
UPDATE PET SET QUANTITY = 9 WHERE ID = 1;

#Drop data using Alter EX
ALTER TABLE PETSALE
DROP COLUMN PROFIT;

#Alter Using Alter 
ALTER TABLE PETSALE
ALTER COLUMN PET SET DATA TYPE VARCHAR(20);

#REname using Alter
ALTER TABLE PETSALE
RENAME COLUMN PET TO ANIMAL;

#delete all data EX
TRUNCATE TABLE PET IMMEDIATE;

#Drop Table
DROP TABLE PET;

#String Pattern
WHERE-requires a predicate
predicate equates to true false or unknown
use string patterns to find = string
SYNTAX-Where (Columnname) like (String Pattern%)
%is used to represent missing letters
use with select statement

#range
used to find data between two values
can use or ,in,and,between
EX
Where country ='AD' or Country="BR"
where country in ('AU','BR')
where pages >= 290 and pages <= 300
where pages between 290 and 300

#sorting
uses order
ex: order by title
default: ascending
to make it descending order
EX: order by title DESC
can also use value of column
EX order by 2

#GROUPING RESULTS
Eliminate Duplicates
Distinct
EX:select distinct(country) from author
to see how many in select group
Group by
EX: group by country
Having clause: has a amount equal or greater to the set value
group by country having count(country) > 4

#Built in Functions
Reducers amount of retrieved data
speed up processing
AGGREGATE-SUM,MIN,MAX,AVG Functions
You can named resulting column
SYNTAX: select sum(x) as sumx from Pet
Can preform MAth expression between columns
EX: AVG(column1/column2)
SCALER FUNS-Round,LEngth,UCASE,LCASE
DATE AND TIME FUNCS-Year-MONTH,HOUR

#example of built in function
select length(animal) from PETRESCUE 

#RESULTS WILL BECOME UPPERCASE
select UCASE(animal) from PETRESCUE 

#Distinct and Uppercase values
select distinct UCASE(animal) from PETRESCUE 

#LCASE used for lowercase

# find specific date or time
select SUM(QUANTITY) from PETRESCUE where MONTH(RESCUEDATE)='05';

#SUb Queries and Nested Selects\
sub-query-a query inside a query-nested
can evaluate aggregate functions in the Where clause but sub queries can
put sub query in ()
Syntax:
SELECT column_name [, column_name ]
FROM table1 [, table2 ]
WHERE column_name OPERATOR
   (SELECT column_name [, column_name ]
   FROM table1 [, table2 ]
   WHERE condition);
EX:
select * from employees where salary > (select AVG(salary)from employees)
#giving name to specific value
select EMP_ID, SALARY, ( select MAX(SALARY) from employees ) AS MAX_SALARY 
from employees;

#working with multiple tables
can use sub-queries,implicit join,join operators
In subqueries-nested query can take data from other table
EX:
Select * from employees, where department_ID IN,
(select department_ID_department from departments)
select * from employees where JOB_ID IN (select JOB_IDENT from jobs where JOB_TITLE= 'Jr. Designer');
select * from jobs  where JOB_IDENT in (select JOB_ID from employees where YEAR(B_DATE)>1976 and sex = 'F')
to state value from one table use table.value
EX:
select EMP_ID, DEP_NAME from employees E, departments D where E.DEP_ID = D.DEPT_ID_DEP;
select * from employees, jobs where employees.JOB_ID = jobs.JOB_IDENT;

#Getting table and column details
DB2:select * from SYSCAT.TABLES
select TABSCHEMA, TABNAME, CREATE_TIME from syscat.tables where tabschema=‘username’ -> will output schema name and table name
SQL SERVER:INFORMATION_SCHEMA.TABLES
#retrieve names of columns
select * from syscat.columns where tabname = ‘DOGS’
#get specific details of all coloumns 
select distinct(name), coltype, length from sysibm.syscolumns where tbname = ‘DOGS’
