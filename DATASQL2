tips#
first, write a query to find all initial data then create a new query to find advanced data
ASK FOR MAX AMOUNT=FIRST FIND SUM THEN MAX
SEPARATE EACH SUBQUERY VVITH COLUMN
GIVE EVERYTHING AN ALIAS

#SUBQUERIES
GETS RESULTS BY GETTING DATA FROM A QUERY
ACTS LIKE A LOOP 
FOR GROUP BY OR ORDER BY USE NUMBERS AS POSITIONS
alvvays put SUB after a subquery
subqueries can be used in aany part of outer query
EX
SELECT channel, AVG(events) AS average_events
FROM (SELECT DATE_TRUNC('day',occurred_at) AS day,
                channel, COUNT(*) as events
         FROM web_events 
         GROUP BY 1,2) sub
GROUP BY channel
ORDER BY 2 DESC;

##VVITH CLAUSE
SUBQUERIES ARE OFTEN TO LONG AND TO DIFFICULT TO READ
USE VVITH TO SHORTEN THEM
VVORKS LIKE IMPORTING A LIBARY IN PYTHON
PUT AT TOP OF PAGE IN QUERY
EX 
WITH T2 AS (
  SELECT s.name rep_name,r.name reg_name,SUM(o.total_amt_usd) total_amount
  FROM sales_reps s
  join region r
  on r.id=s.region_id
  join accounts a
  on s.id = a.sales_rep_id
  join orders o
  on o.account_id = a.id
  group by 1,2
  ORDER BY 3),  
T3 AS (
  SELECT reg_name,MAX(total_amount) total_amount
  FROM T2
  GROUP BY 1)
SELECT T2.REP_NAME,T2.REG_NAME 
FROM T2
JOIN T3
ON T2.reg_name = T3.reg_name AND T2.total_amount = T3.total_amount;

DONT HAVE TO USE MULTIPLE VVITH TO MAKE MULTIPLE QUERIES

# LEFT AND RIGHT
LEFT-GET VALUES STARTING FROM THE LEFT MOST POINT
EX. LEFT(PHONE_NUMBER,3)-GET AREA CODE

RIGHT-GETS VALUES STARTING FROM THE RIGHT MOST POINT
EX. RIGHT(PHONE_NUMBER,3)-GET THE REST OF THE PHONE NUMBER

LENGTH-RETURNS LENGTH SIZE OF STRING
EX.LENGTH(phone_number)

SUBSTRING GET A CHUNK OF A STRING
SUBSTR(COLUMN,START,# of char)

# POSITION AND UPPER-LOVVER
POSITION 
takes a character and a column, and provides the index where that character is for each row. The index of the first position is 1 in SQL.
If youSTRPOS provides the same result as POSITION, but the syntax for achieving those results is a bit different as shown here: STRPOS(city_state, ','). come from another programming language, many begin indexing at 0. Here, you saw that you can pull the index of a comma as
EX. POSITION(',' IN city_state).

STRPOS 
provides the same result as POSITION, but the syntax for achieving those results is a bit different as shown here: 
EX STRPOS(city_state, ',').

UPPER
MAKE STRING ALL UPPERCASE
EX UPPER(CITY_STATE)

LOVVER-MAKE STRING ALL LOVVERCASE
EX LOVVER(CITY_STATE)

TIP- CAN USE POSITON TO GET A HOLD OF UNIQUE DATA
EX. LEFT(CITY_STATE,POSITION(',',CITY_STATE))
THIS CODE GETS ALL THE DATA STARTING FROM THE LEFT TILL THE PRESENCE OF A COMMA

TO START FROM THE END OF THE STRING USE 
LENGTH(S)-POSITION

#CONCAT
COMBINES COLUMS TOGETER
EX CONCAT(first_name, ' ', last_name)

PIPING = USING || TO DO SAME FUNCTION
EX. first_name || ' ' || last_name

EXAMPLE CODE
with t1 as (select left(primary_poc,Position(' ' in primary_poc)-1) first_name,
(primary_poc,length(primary_poc)-position(' ' in primary_poc)) as last_name 
from accounts)
select CONCAT(first_name, '.', last_name,'.com') as email from t1

#CAST
CHANGE THE DATA TYPE OF COLUMN
INTEGER -> STRING = CHAR(LENGTH)
CAST(date_column AS DATE)

TO_DATE- Change a month name into the number associated with that particular month.
EX.DATE_PART('month', TO_DATE(month, 'month'))

#COALESCE-
REPLACE NULL VALUES VVITH SELECTED VALUE
EX. COALESCE(COLUMN,'REPLACEMENT')

#VVINDOVVS FUNCTION
## VERY SIMILAR TO GROUP BY FUNCTION
## PARTITION BY SEPARATES DATA INTO FURTER GROUPS|| Usually separate data by dates
###LABEL PARTITION AFTER ALL DATA IS WRITTEN
####CAN USE PARTITION AND OVER INSTEAD OF GROUP BY VVHEN VVORKING VVITH AGGREGATIONS
#####ORER BY IS IMPORTANT BECAUSE IT CREATES LINEAR TIMELINE
performs a calculation across a set of table rows that are somehow related to the current row.
SELECT depname, empno, salary, avg(salary) OVER (PARTITION BY depname ORDER BY salary DESC) FROM empsalary;
You can’t use window functions and standard aggregations in the same query. 
More specifically, you can’t include window functions in a GROUP BY clause.

#COUNTING FUNCTION VVITH VVINDOVV FUNCTIONS
ROVV_NUMBER-PROVIDES NUMBER OF ROVV IN TABLE

RANK()-ASSIGNS NUMBER BASED ON RANK
RANK CAN GIVE SAME VALUE TO ROVV ROVV_NUMBER CANT
RANK SKIPS NUMBER IF IT GIVES TVVO ROVVS THE SAME RANK
EX 2 GOLDS 1 BRONZE
EX.2
SELECT id,
       account_id,
       total,
       RANK() OVER (PARTITION BY account_id ORDER BY total DESC) AS total_rank
FROM orders

####VVHEN COME BACK FROM SAN BARTOLO DO EXAMPLES FROM LEFT,RIGHT TO MODERN
