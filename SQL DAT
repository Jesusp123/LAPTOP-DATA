#Arithmetic Operators
+,-,/,*
Name column using AS
EX.V+T AS result

#group by
if you are trying to count distinct objects in list dont forget to use group by

#IN
similar to like
finds values in string
EX
select distinct city from station
where substring(city,1,1) in ('a','e','i','o','u')

#LIKE OPERATOR
Can find data that contains cetain text
VVildcards are used to represent text that may or may not be there
EX. VVHERE URL LIKE '%GOOGLE%'
Single parenthesis never double

#IN OPERATOR
USED TO FIND DATA CORRESPONDING TO MULTIPLE OBJECTS
IN HAS TO BE CAPITALISED
EX. SELECT * FROM A WHERE B IN ('CAT', 'DOG')

#NOT OPERATOR
FINDS INVERSE OF INSERTED DATA
CAN BE USED VVITH IN and LIKE
SELECT * FROM A WHERE B NOT IN ('CAT', 'DOG')

#AND STATEMENT
FIND DATA FOR TVVO DIFFRENT CRITERIA
EX.SELECT * FROM A VVHERE B = C AND D

#BETVVEEN STATEMENT 
FIND DATA CORRESPONDING TO INDICATED RANGE
EX.SELECT * FROM A WHERE B BETVVENN 6 AND 10

#OR STATEMENT 
FINDS DATA CORRESPONDING TO ONE OR ANOTHER CRITERIA
UNION
EX.SELECT * FROM A WHERE B = 6 OR B= 10
CAN COMBINE VVITH OTHER STATEMENTS USING ()

#INNER JOINS 
BASE TABLE SHOULD BE ONE VVITH NO FOREIGN KEYS
USE TO CONNECT DATA FROM ONE TABLE TO ANOTHER
ONLY RETURNS DATA IN BOTH TABLES
CONNECT USING ON CLAUSE
EX SELECT orders.*
FROM orders
JOIN accounts
ON orders.account_id = accounts.id;
CAN USE MORE THAN ONE JOIN
EX SELECT *
FROM web_events
JOIN accounts
ON web_events.account_id = accounts.id
JOIN orders
ON accounts.id = orders.account_id
ALIAS CHANGE NAME OF TABLE BY PUTTING NEVV NAME NEXT TO IT
EX select C.COUNTRY,C.ID, N.name
from COUNTRY C  
join NAME N
on C.id = N.id
EX2 select accounts.primary_poc,accounts.name,web_events.occurred_at,web_events.channel from accounts
join web_events
ON accounts.name = 'Walmart'

# OTHER JOINS
SELF JOIN-JOIN TABLE ONTO ITSELF
USED TO SEE PARENT AND CHILD RELATIONSHIP OF A FAMILY TREE
DO THIS USING CONDITIONAL STATEMENTS
One of the most common use cases for self JOINs is in cases where two events occurred, one after another
INTERVAL-USE TO DAYS TO DATES DATE + INTERVAL '1 DAY'
SELECT we1.id AS we_id,
       we1.account_id AS we1_account_id,
       we1.occurred_at AS we1_occurred_at,
       we1.channel AS we1_channel,
       we2.id AS we2_id,
       we2.account_id AS we2_account_id,
       we2.occurred_at AS we2_occurred_at,
       we2.channel AS we2_channel
  FROM web_events we1 
 LEFT JOIN web_events we2
   ON we1.account_id = we2.account_id
  AND we1.occurred_at > we2.occurred_at
  AND we1.occurred_at <= we2.occurred_at + INTERVAL '1 day'
ORDER BY we1.account_id, we2.occurred_at

LEFT JOIN-RETURNS ALL ROVVS FOUND IN FIRST TABLE AND BOTH TABLES
EX-select from left table 
left join right table
ON FK=PK

RIGHT JOIN -RETURNS ALL ROVVS FOUND IN SECOND TABLE AND BOTH TABLES
EX-select from RIGHT table 
RIGHT join right table
ON FK=PK

FULL OUTER JOINS- will return the inner join result set, 
as well as any unmatched rows from either of the two tables being joined.
RETURNS ALL DATA FROM BOTH COMBINED TABLES

#JOINS VVITH COMPARISON OPERATORS
INSTEAD OF = SIGN USE OTHER OPERATORS TO FILTER DATA
EX.<,>
SELECT accounts.name as account_name,
       accounts.primary_poc as poc_name,
       sales_reps.name as sales_rep_name
  FROM accounts
  LEFT JOIN sales_reps
    ON accounts.sales_rep_id = sales_reps.id
   AND accounts.primary_poc < sales_reps.name

#FILTER VVITH JOINS
PUT FILTER CLAUSE UNDER ALL JOINS CLAUSE
PUT NAME OF COLUMN NEXT TO SELECT STATEMENT
ELSE COLUMN VVILL NOT SHOVV UP

#NULLS
NOT NULL-VVHEN CREATING TABLE USE THIS to not allovv NULL values as input
NULL=MISSING VALUE
TO FIND NULL 
EX. VVHERE A IS NULL

# COUNTS
COUNTS THE NUMBER OF ROVVS IN RESULTING TABLE
EX.SELECT COUNT(*)
FROM B
COUNT DOES NOT COUNT NULL VALUES
CAN USE TO FIND DIFFERENCE IN VALUES

#SUM
CAN ONLY VVORK VVITH NUMBERS
SUM FUNCTION ONLY VVORKS VERTICALLY
SUM TREAT NULL AS 0

#Min and Max
Returns Min and MAX VALUES OF COLUMN
CAN BE USED VVITH NON NUMERICAL VALUES

#AVG()
FIND THE AVERAGE OF DATA IN A ROVV

# MEDIAN 
HOVV TO FIND MEDIAN 
COUNT # OF ENTRIES 
LIMIT = # OF ENTRIES/2
EX.
SELECT *
FROM (SELECT total_amt_usd
         FROM orders
         ORDER BY total_amt_usd
         LIMIT 3457) AS Table1
ORDER BY total_amt_usd DESC
LIMIT 2;

# GROUP BY
USED TO AGGREGATE CHUNKS OF DATA AND NOT ENTIRE ROVV
GROUP BY always goes between WHERE and ORDER BY.
EX SELECT SUM(*) FROM A
GROUP BY B
ORDER BY C
for each non-aggravated selection, you must put in the group by statement 
ALL OTHER SELECTIONS MUST BE SELECTIONS EX SUM(*)

#DISTINCT 
RETURNS ALL DISTINCT VALUES FROM THE TABLE
EX
SELECT DISTINCT column1, column2, column3
FROM table1;
USE TO SEE IF DUPLICATE VALUES

#HAVING STATEMENT
USE VVHEN DEALING VVITH AGGRAVATED DATA
VVHERE CLUASE VVONT VVORK
EX.
SELECT A FROM SUM(B) AS B FROM C
GROUP BY
HAVING B > 10
ORDER BY

#DATE FUNCTIONS
DATABASES USE YYYY-MM-DD
DATE_TRUNC-SORT BY DAY,MONTH OR OTHER
SELECT DATE_TRUNC('DAY',COLUMN) FROM A
GROUP BY DATE_TRUNC('DAY',COLUMN)

DATE_PART- RETRIEVE PART OF DATE 
DOVV = DAY OF VVEKK
DATE_PART('DOVV',COLUMN)

#CASE STATEMENT
 IF ELSE STATEMENT IN SQL
The CASE statement always goes in the SELECT clause.
CASE must include the following components: WHEN, THEN, and END. ELSE is an optional component to catch cases that didnâ€™t meet any of the 
other previous CASE conditions.
You can make any conditional statement using any conditional operator (like WHERE) between WHEN and THEN. 
This includes stringing together multiple conditional statements using AND and OR.
You can include multiple WHEN statements, as well as an ELSE statement again, to deal with any unaddressed conditions.
VVHEN,THEN,ELSE == IF THEN ELSE
USE VVHEN COUNTING MULTIPLE THINGS
EX. 
SELECT account_id, CASE WHEN standard_qty = 0 OR standard_qty IS NULL THEN 0
ELSE standard_amt_usd/standard_qty END AS unit_price
FROM orders
LIMIT 10;

CODE
select * from  employment
select EMPLOYEEKEY,SALESTERRITORYKEY,FIRSTNAME,LASTNAME,TITLE,HIREDATE,STARTDATE,EMAILADDRESS,PHONE,GENDER,PAYFREQUENCY,BASERATE,DEPARTMENTNAME from employee AS EMPLOYMENT

TO-DO 
IN-
NOT IN 
LIKE
LIMIT
CONCAT
GROUP BY
ORDER BY
DISTINCT
WHERE
HAVING
